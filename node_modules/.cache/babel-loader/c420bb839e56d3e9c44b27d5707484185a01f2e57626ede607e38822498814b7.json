{"ast":null,"code":"var _jsxFileName = \"/home/marissa/react-jokes-classes/src/JokeList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport './JokeList.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction JokeList({\n  numJokesToGet = 5\n}) {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const seenJokes = useRef(new Set());\n  useEffect(() => {\n    getJokes();\n  }, []); // Mimics componentDidMount\n\n  async function getJokes() {\n    try {\n      let fetchedJokes = [];\n      while (fetchedJokes.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let {\n          id,\n          joke\n        } = res.data;\n        if (!seenJokes.current.has(id)) {\n          seenJokes.current.add(id);\n          fetchedJokes.push({\n            id,\n            joke,\n            votes: 0\n          });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n      setJokes(fetchedJokes);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  function generateNewJokes() {\n    setIsLoading(true);\n    getJokes();\n  }\n  function vote(id, delta) {\n    setJokes(jokes.map(j => j.id === id ? {\n      ...j,\n      votes: j.votes + delta\n    } : j));\n  }\n  let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"JokeList\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-4x fa-spinner fa-spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: generateNewJokes,\n        children: \"Get New Jokes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), sortedJokes.map(joke => /*#__PURE__*/_jsxDEV(Joke, {\n        text: joke.joke,\n        id: joke.id,\n        votes: joke.votes,\n        vote: vote\n      }, joke.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(JokeList, \"CKld8DMnpSVBeJAA6sUy7XdnzCE=\");\n_c = JokeList;\nexport default JokeList;\nvar _c;\n$RefreshReg$(_c, \"JokeList\");","map":{"version":3,"names":["React","useState","useEffect","axios","Joke","jsxDEV","_jsxDEV","Fragment","_Fragment","JokeList","numJokesToGet","_s","jokes","setJokes","isLoading","setIsLoading","seenJokes","useRef","Set","getJokes","fetchedJokes","length","res","get","headers","Accept","id","joke","data","current","has","add","push","votes","console","log","err","error","generateNewJokes","vote","delta","map","j","sortedJokes","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","text","_c","$RefreshReg$"],"sources":["/home/marissa/react-jokes-classes/src/JokeList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Joke';\nimport './JokeList.css';\n\nfunction JokeList({ numJokesToGet = 5 }) {\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const seenJokes = useRef(new Set());\n\n  useEffect(() => {\n    getJokes();\n  }, []); // Mimics componentDidMount\n\n  async function getJokes() {\n    try {\n      let fetchedJokes = [];\n      while (fetchedJokes.length < numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let { id, joke } = res.data;\n\n        if (!seenJokes.current.has(id)) {\n          seenJokes.current.add(id);\n          fetchedJokes.push({ id, joke, votes: 0 });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n      setJokes(fetchedJokes);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  function generateNewJokes() {\n    setIsLoading(true);\n    getJokes();\n  }\n\n  function vote(id, delta) {\n    setJokes(jokes.map(j => j.id === id ? { ...j, votes: j.votes + delta } : j));\n  }\n\n  let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  return (\n    <div className=\"JokeList\">\n      {isLoading ? (\n        <div className=\"loading\"><i className=\"fas fa-4x fa-spinner fa-spin\" /></div>\n      ) : (\n        <>\n          <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n            Get New Jokes\n          </button>\n          {sortedJokes.map(joke => (\n            <Joke text={joke.joke} key={joke.id} id={joke.id} votes={joke.votes} vote={vote} />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default JokeList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExB,SAASC,QAAQA,CAAC;EAAEC,aAAa,GAAG;AAAE,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMe,SAAS,GAAGC,MAAM,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;EAEnChB,SAAS,CAAC,MAAM;IACdiB,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,eAAeA,QAAQA,CAAA,EAAG;IACxB,IAAI;MACF,IAAIC,YAAY,GAAG,EAAE;MACrB,OAAOA,YAAY,CAACC,MAAM,GAAGX,aAAa,EAAE;QAC1C,IAAIY,GAAG,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAC,4BAA4B,EAAE;UACtDC,OAAO,EAAE;YAAEC,MAAM,EAAE;UAAmB;QACxC,CAAC,CAAC;QACF,IAAI;UAAEC,EAAE;UAAEC;QAAK,CAAC,GAAGL,GAAG,CAACM,IAAI;QAE3B,IAAI,CAACZ,SAAS,CAACa,OAAO,CAACC,GAAG,CAACJ,EAAE,CAAC,EAAE;UAC9BV,SAAS,CAACa,OAAO,CAACE,GAAG,CAACL,EAAE,CAAC;UACzBN,YAAY,CAACY,IAAI,CAAC;YAAEN,EAAE;YAAEC,IAAI;YAAEM,KAAK,EAAE;UAAE,CAAC,CAAC;QAC3C,CAAC,MAAM;UACLC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACjC;MACF;MACAtB,QAAQ,CAACO,YAAY,CAAC;MACtBL,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,OAAOqB,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC;IACpB;EACF;EAEA,SAASE,gBAAgBA,CAAA,EAAG;IAC1BvB,YAAY,CAAC,IAAI,CAAC;IAClBI,QAAQ,CAAC,CAAC;EACZ;EAEA,SAASoB,IAAIA,CAACb,EAAE,EAAEc,KAAK,EAAE;IACvB3B,QAAQ,CAACD,KAAK,CAAC6B,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAChB,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGgB,CAAC;MAAET,KAAK,EAAES,CAAC,CAACT,KAAK,GAAGO;IAAM,CAAC,GAAGE,CAAC,CAAC,CAAC;EAC9E;EAEA,IAAIC,WAAW,GAAG,CAAC,GAAG/B,KAAK,CAAC,CAACgC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACb,KAAK,GAAGY,CAAC,CAACZ,KAAK,CAAC;EAC9D,oBACE3B,OAAA;IAAKyC,SAAS,EAAC,UAAU;IAAAC,QAAA,EACtBlC,SAAS,gBACRR,OAAA;MAAKyC,SAAS,EAAC,SAAS;MAAAC,QAAA,eAAC1C,OAAA;QAAGyC,SAAS,EAAC;MAA8B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,gBAE7E9C,OAAA,CAAAE,SAAA;MAAAwC,QAAA,gBACE1C,OAAA;QAAQyC,SAAS,EAAC,kBAAkB;QAACM,OAAO,EAAEf,gBAAiB;QAAAU,QAAA,EAAC;MAEhE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACRT,WAAW,CAACF,GAAG,CAACd,IAAI,iBACnBrB,OAAA,CAACF,IAAI;QAACkD,IAAI,EAAE3B,IAAI,CAACA,IAAK;QAAeD,EAAE,EAAEC,IAAI,CAACD,EAAG;QAACO,KAAK,EAAEN,IAAI,CAACM,KAAM;QAACM,IAAI,EAAEA;MAAK,GAApDZ,IAAI,CAACD,EAAE;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA+C,CACnF,CAAC;IAAA,eACF;EACH;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACzC,EAAA,CA1DQF,QAAQ;AAAA8C,EAAA,GAAR9C,QAAQ;AA4DjB,eAAeA,QAAQ;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}